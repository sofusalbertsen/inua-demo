name: Semantical docker build push pipeline
on:
  push:
    branches: [ "main" ]  # Trigger on pushes to the "main" branch.
    tags: [ 'v*.*.*' ]   # Also trigger on semantic versioning tags.
  pull_request:
    branches: [ "main" ]  # Trigger on pull requests targeting the "main" branch.

env:
  REGISTRY: ghcr.io       # Set default container registry to GitHub's container registry.
  IMAGE_NAME: ${{ github.repository }}  # Name the image using the GitHub repository's name.

jobs:
  build:
    runs-on: ubuntu-latest  # Environment
    # Set permissions to read contents, write packages, and write id-tokens for identity challenges outside PRs.
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # Checkout the repository code.
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Extract versioning from git tags and commits, following semantic versioning rules.
      - uses: paulhatch/semantic-version@v5.1.0
        id: semver
        with:
          tag_prefix: "v"
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "${major}.${minor}.${patch}-prerelease${increment}"
          bump_each_commit: false
          bump_each_commit_patch_pattern: ""
          user_format_type: "csv"
          enable_prerelease_mode: true

      # Display the extracted version to the console.
      - name: print outputs
        run: echo ${{ steps.semver.outputs.version }}

      # Check code for styling and syntax issues.
      - name: Lint Code Base
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Ensure the Dockerfile adheres to best practices.
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: "Dockerfile"
          no-fail: true

      # Initialize and configure Docker Buildx, a modern building toolkit.
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Authenticate against the specified container registry, but skip this during pull requests.
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generate metadata like tags and labels for the Docker image.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            tyep=raw,value=${{steps.semver.outputs.version}}

      # Create the Docker image and push it to the registry, excluding push during pull requests.
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: VERSION=${{steps.semver.outputs.version}}

      # Scan the built Docker image for vulnerabilities in operating system packages and libraries, focusing on critical and high severity issues.
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{steps.semver.outputs.version}}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
